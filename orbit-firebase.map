{"version":3,"sources":["iife-start.js","assets/globalized-loader.js","orbit-firebase/cache-source.js","orbit-firebase/eager-relationship-loader.js","orbit-firebase/firebase-client.js","orbit-firebase/firebase-connector.js","orbit-firebase/firebase-listener.js","orbit-firebase/firebase-requester.js","orbit-firebase/firebase-serializer.js","orbit-firebase/firebase-source.js","orbit-firebase/firebase-transformer.js","orbit-firebase/lib/array-utils.js","orbit-firebase/lib/cache-utils.js","orbit-firebase/lib/object-utils.js","orbit-firebase/lib/operation-utils.js","orbit-firebase/lib/schema-utils.js","orbit-firebase/operation-decomposer.js","orbit-firebase/operation-matcher.js","orbit-firebase/transformers/add-record.js","orbit-firebase/transformers/add-to-has-many.js","orbit-firebase/transformers/add-to-has-one.js","orbit-firebase/transformers/remove-from-has-many.js","orbit-firebase/transformers/remove-has-one.js","orbit-firebase/transformers/remove-record.js","orbit-firebase/transformers/replace-attribute.js","orbit-firebase/transformers/replace-has-many.js","orbit-firebase/transformers/update-meta.js","iife-stop.js"],"sourcesContent":["(function() {\n","// Share loader properties from globalized Orbit package\nvar define = window.Orbit.__define__;\nvar requireModule = window.Orbit.__requireModule__;\nvar require = window.Orbit.__require__;\nvar requirejs = window.Orbit.__requirejs__;\n","define('orbit-firebase/cache-source', ['exports', 'orbit/transformable', 'orbit/lib/objects'], function (exports, Transformable, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(cache){\n\t\t\tTransformable['default'].extend(this);\n\t\t\tthis._cache = cache;\n\t\t\tobjects.expose(this, this._cache, ['retrieve']);\n\t\t},\n\n\t\t_transform: function(operations){\n\t\t\tconsole.log(\"transforming cache\", operations);\n\t\t\tvar _this = this;\n\t\t\toperations = objects.isArray(operations) ? operations : [operations];\n\n\t\t\toperations.forEach(function(operation){\n\t\t\t\t_this._cache.transform(operation);\n\t\t\t});\n\t\t}\n\t});\n\n});","define('orbit-firebase/eager-relationship-loader', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(transformable, listener, schema){\n\t\t\tvar _this = this;\n\t\t\tthis._schema = schema;\n\t\t\tthis._listener = listener;\n\n\t\t\ttransformable.on(\"didTransform\", function(operation){\n\t\t\t\t_this._process(operation);\n\t\t\t});\n\t\t},\n\n\t\t_process: function(operation){\n\t\t\tconsole.log(\"checking\", operation);\n\t\t\tif(['add', 'replace'].indexOf(operation.op) === -1) return;\n\t\t\tif(operation.path[2] === '__rel') this._processLink(operation);\n\t\t\tif(operation.path.length === 2) this._processRecord(operation);\n\n\t\t},\n\n\t\t_processRecord: function(operation){\n\t\t\tvar _this = this;\n\t\t\tvar record = operation.value;\n\t\t\tvar modelType = operation.path[0];\n\t\t\tvar modelSchema = this._schema.models[modelType];\n\n\t\t\tObject.keys(modelSchema.links).forEach(function(link){\n\t\t\t\tvar linkDef = _this._schema.models[modelType].links[link];\n\t\t\t\tvar linkType = _this._schema.singularize(link);\n\n\t\t\t\tif(linkDef.type === 'hasOne'){\n\t\t\t\t\tif(record.__rel[link]){\n\t\t\t\t\t\tvar id = record.__rel[link];\n\t\t\t\t\t\t_this._listener.subscribeToRecord(linkDef.model, id);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (linkDef.type === 'hasMany'){\n\t\t\t\t\tif(record.__rel[link]){\n\t\t\t\t\t\tvar ids = Object.keys(record.__rel[link]);\n\t\t\t\t\t\t_this._listener.subscribeToRecords(linkDef.model, ids);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\t\t},\n\n\t\t_processLink: function(operation){\n\t\t\tvar modelType = operation.path[0];\n\t\t\tvar link = operation.path[3];\n\t\t\tvar linkDef = this._schema.models[modelType].links[link];\n\t\t\tvar linkType = linkDef.model;\n\t\t\tvar relationshipType = linkDef.type;\n\t\t\tvar id, ids;\n\n\t\t\tif(relationshipType === 'hasMany'){\n\t\t\t\tif(operation.path.length === 4){\n\t\t\t\t\tids = Object.keys(operation.value);\n\t\t\t\t\tthis._listener.subscribeToRecords(linkType, ids);\n\n\t\t\t\t} else if (operation.path.length === 5){\n\t\t\t\t\tid = operation.path[4];\n\t\t\t\t\tthis._listener.subscribeToRecord(linkType, id);\n\n\t\t\t\t}\n\n\t\t\t} else if (relationshipType === 'hasOne'){\n\t\t\t\tid = operation.value;\n\t\t\t\tthis._listener.subscribeToRecord(linkType, id);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"Relationship type not supported: \" + relationshipType);\n\t\t\t}\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-client', ['exports', 'orbit/lib/objects', 'orbit/main', 'orbit-firebase/lib/array-utils'], function (exports, objects, Orbit, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseRef){\n\t\t\tthis.firebaseRef = firebaseRef;\n\t\t},\n\n\t\tset: function(path, value){\n\t\t\tpath = this._normalizePath(path);\n\n\t\t\tvar _this = this;\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\tvalue = value || null; // undefined causes error in firebase client\n\t\t\t\t_this.firebaseRef.child(path).set(value, function(error){\n\t\t\t\t\terror ? reject(error) : resolve(value); // jshint ignore:line\n\t\t\t\t});\n\t\t\t});\n\n\t\t},\n\n\t\tpush: function(path, value){\n\t\t\tvar _this = this;\n\t\t\treturn new Promise(function(resolve, reject){\n\t\t\t\t_this.firebaseRef.child(path).push(value, function(error){\n\t\t\t\t\tif(error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tremove: function(path){\n\t\t\tvar _this = this;\n\t\t\tpath = this._normalizePath(path);\n\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\t_this.firebaseRef.child(path).remove(function(error){\n\t\t\t\t\terror ? reject(error) : resolve(); // jshint ignore:line\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tvalueAt: function(path){\n\t\t\tvar _this = this;\n\t\t\tpath = this._normalizePath(path);\n\n\t\t\treturn new Orbit['default'].Promise(function(resolve, reject){\n\t\t\t\t_this.firebaseRef.child(path).once('value', function(snapshot){\n\n\t\t\t\t\tresolve(snapshot.val());\n\n\t\t\t\t}, function(error){\n\t\t\t\t\treject(reject);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t\n\t\tremoveFromArray: function(arrayPath, value){\n\t\t\tvar _this = this;\n\n\t\t\treturn this.valueAt(arrayPath).then(function(array){\n\t\t\t\tif(!array) return;\n\t\t\t\tconsole.log(array);\n\n\t\t\t\tvar index = array.indexOf(value);\n\t\t\t\tif(index === -1) return Orbit['default'].resolve();\n\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\treturn _this.set(arrayPath, array);\n\t\t\t});\n\t\t},\n\n\t\tremoveFromArrayAt: function(arrayPath, index){\n\t\t\tvar _this = this;\n\t\t\tarrayPath = this._normalizePath(arrayPath);\n\n\t\t\treturn this.valueAt(arrayPath).then(function(array){\n\t\t\t\tif(!array) return;\n\n\t\t\t\tarray = array_utils.removeAt(array, index);\n\t\t\t\treturn _this.set(arrayPath, array);\n\t\t\t});\n\t\t},\t\t\n\n\t\tappendToArray: function(arrayPath, value){\n\t\t\tvar _this = this;\n\t\t\tarrayPath = this._normalizePath(arrayPath);\n\n\t\t\treturn _this.valueAt(arrayPath).then(function(array){\n\t\t\t\tarray = array || [];\n\t\t\t\tif(array.indexOf(value) === -1){\n\t\t\t\t\tarray.push(value);\n\t\t\t\t}\n\t\t\t\treturn _this.set(arrayPath, array);\t\n\n\t\t\t});\n\t\t},\n\n\t    _normalizePath: function(path) {\n\t    \treturn (typeof path === 'string') ? path : path.join('/');\n\t    },\t\n\t});\n\n});","define('orbit-firebase/firebase-connector', ['exports', 'orbit/transform-connector'], function (exports, TransformConnector) {\n\n\t'use strict';\n\n\texports['default'] = TransformConnector['default'].extend({\n\t\tfilterFunction: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tvar recordPath = [path[0], path[1]];\n\t\t\tvar record = this.target.retrieve(recordPath);\n\n\t\t\tif(!record && path.length > 2){\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-listener', ['exports', 'orbit/lib/objects', 'orbit/evented', 'orbit-firebase/lib/schema-utils', 'orbit/operation'], function (exports, objects, Evented, SchemaUtils, Operation) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseRef, schema, serializer){\n\t\t\tEvented['default'].extend(this);\n\n\t\t\tthis._firebaseRef = firebaseRef;\n\t\t\tthis._schema = schema;\n\t\t\tthis._schameUtils = new SchemaUtils['default'](schema);\n\t\t\tthis._serializer = serializer;\n\n\t\t\tthis._firebaseListeners = {};\n\t\t},\n\n\t\tsubscribeToType: function(type){\n\t\t\tconsole.log(\"subscribing to type\", type);\n\t\t\tvar _this = this;\n\t\t\tvar typeRef = this._firebaseRef.child('type');\n\t\t\tthis._enableListener(type, 'child_added', function(snapshot){\n\t\t\t\tvar record = snapshot.val();\n\t\t\t\tconsole.log(\"record added\", record);\n\t\t\t\t_this.subscribeToRecord(type, record.id);\n\t\t\t});\n\t\t},\n\n\t\tsubscribeToRecords: function(type, ids){\n\t\t\tvar _this = this;\n\t\t\tids.forEach(function(id){\n\t\t\t\t_this.subscribeToRecord(type, id);\n\t\t\t});\n\t\t},\n\n\t\tsubscribeToRecord: function(type, id){\n\t\t\tconsole.log(\"subscribing to record\", [type, id]);\n\t\t\tvar _this = this;\n\t\t\tvar modelSchema = this._schema.models[type];\n\t\t\tvar path = [type, id].join(\"/\");\n\n\t\t\tthis._enableListener(path, \"value\", function(snapshot){\n\t\t\t\tvar value = snapshot.val();\n\n\t\t\t\tif(value){\n\t\t\t\t\tvar deserializedRecord = _this._serializer.deserialize(type, id, snapshot.val());\n\t\t\t\t\tconsole.log(\"adding record\", [type, id]);\n\t\t\t\t\t_this._emitDidTransform(new Operation['default']({ op: 'add', path: path, value: deserializedRecord }) );\n\t\t\t\t} else {\n\t\t\t\t\t_this._emitDidTransform(new Operation['default']({ op: 'remove', path: path }));\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tObject.keys(modelSchema.attributes).forEach(function(attribute){\n\t\t\t\t_this._subscribeToAttribute(type, id, attribute);\n\t\t\t});\n\n\t\t\tObject.keys(modelSchema.links).forEach(function(link){\n\t\t\t\t_this._subscribeToLink(type, id, link);\n\t\t\t});\n\t\t},\n\n\t\tunsubscribeAll: function(){\n\t\t\tvar _this = this;\n\t\t\tObject.keys(this._firebaseListeners).forEach(function(listenerKey){\n\t\t\t\tvar path = listenerKey.split(\":\")[0];\n\t\t\t\tvar eventType = listenerKey.split(\":\")[1];\n\t\t\t\tvar callback = _this._firebaseListeners[listenerKey];\n\n\t\t\t\t_this._disableListener(path, eventType, callback);\n\t\t\t});\n\t\t},\n\n\t\t_subscribeToAttribute: function(type, id, attribute){\n\t\t\tconsole.log(\"subscribing to attribute\", [type, id, attribute].join(\"/\"));\n\t\t\tvar _this = this,\n\t\t\tpath = [type, id, attribute].join(\"/\");\n\n\t\t\tthis._enableListener(path, \"value\", function(snapshot){\n\t\t\t\tconsole.log(\"attribute updated\", snapshot.val());\n\t\t\t\t_this._emitDidTransform(new Operation['default']({ op: 'replace', path: path, value: snapshot.val() }));\n\t\t\t});\n\t\t},\n\n\t\t_subscribeToLink: function(type, id, link){\n\t\t\tconsole.log(\"subscribing to link\", [type, id, link].join(\"/\"));\n\t\t\tvar _this = this;\n\t\t\tvar linkType = this._schameUtils.lookupLinkDef(type, link).type;\n\n\t\t\tif(linkType === 'hasOne'){\n\t\t\t\tthis._subscribeToHasOne(type, id, link);\n\n\t\t\t} else if (linkType === 'hasMany'){\n\t\t\t\tthis._subscribeToHasMany(type, id, link);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unsupported link type: \" + linkType);\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\t_subscribeToHasOne: function(type, id, link){\n\t\t\tvar _this = this;\n\t\t\tvar path = [type, id, link].join(\"/\");\n\n\t\t\tthis._enableListener(path, \"value\", function(snapshot){\n\t\t\t\tconsole.log(\"from hasOne\", snapshot.val());\n\n\t\t\t\tvar key = snapshot.key(),\n\t\t\t\tvalue = snapshot.val();\n\n\t\t\t\tif(value){\n\t\t\t\t\t_this._emitDidTransform(new Operation['default']({ \n\t\t\t\t\t\top: 'replace', \n\t\t\t\t\t\tpath: [type, id, '__rel', link].join(\"/\"), \n\t\t\t\t\t\tvalue: value \n\t\t\t\t\t}));\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t_this._emitDidTransform(new Operation['default']({ \n\t\t\t\t\t\top: 'remove', \n\t\t\t\t\t\tpath: [type, id, '__rel', link].join(\"/\")\n\t\t\t\t\t}));\n\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_subscribeToHasMany: function(type, id, link){\n\t\t\tvar _this = this;\n\t\t\tvar path = [type, id, link].join(\"/\");\n\n\t\t\tthis._enableListener(path, \"child_added\", function(snapshot){\n\t\t\t\tconsole.log(\"child_added to hasMany\", snapshot.val());\n\t\t\t\t_this._emitDidTransform(new Operation['default']({ \n\t\t\t\t\top: 'add', \n\t\t\t\t\tpath: [type, id, '__rel', link, snapshot.key()].join(\"/\"), \n\t\t\t\t\tvalue: snapshot.val() \n\t\t\t\t}));\n\t\t\t});\n\n\t\t\tthis._enableListener(path, \"child_removed\", function(snapshot){\n\t\t\t\tconsole.log(\"child_remove from hasMany\", snapshot.val());\n\t\t\t\t_this._emitDidTransform(new Operation['default']({\n\t\t\t\t\top: 'remove',\n\t\t\t\t\tpath: [type, id, '__rel', link, snapshot.key()].join(\"/\")\n\t\t\t\t}));\n\t\t\t});\n\t\t},\n\n\t\t_emitDidTransform: function(operation){\n\t\t\tconsole.log(\"emitting\", operation.serialize());\n\t\t\tthis.emit(\"didTransform\", operation);\n\t\t},\n\n\t\t_enableListener: function(path, eventType, callback){\n\t\t\tpath = (typeof path === 'string') ? path : path.join('/');\n\t\t\tvar key = this._buildListenerKey(path, eventType);\n\n\t\t\tif(this._listenerExists(key)) return;\n\n\t\t\tthis._firebaseRef.child(path).on(eventType, callback);\n\t\t\tthis._firebaseListeners[key] = callback;\n\t\t},\n\n\t\t_disableListener: function(path, eventType, callback){\n\t\t\tthis._firebaseRef.child(path).off(eventType, callback);\n\t\t},\n\n\t\t_listenerExists: function(key){\n\t\t\treturn this._firebaseListeners[key];\n\t\t},\n\n\t\t_buildListenerKey: function(path, eventType){\n\t\t\treturn [path, eventType].join(\":\");\n\t\t},\n\n\t\t_normalizePath: function(path) {\n\t\t\treturn (typeof path === 'string') ? path.split(\"/\") : path;\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-requester', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/object-utils', 'orbit-firebase/lib/schema-utils', 'orbit/main', 'orbit/lib/assert', 'orbit-common/lib/exceptions'], function (exports, objects, object_utils, SchemaUtils, Orbit, assert, exceptions) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema, serializer){\n\t\t\tassert.assert('FirebaseSource requires Orbit.map be defined', Orbit['default'].map);\n\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schema = schema;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t\tthis._serializer = serializer;\n\t\t},\n\n\t\tfind: function(type, id){\n\t\t\tif(id){\n\t\t\t\tif(objects.isArray(id)) return this._findMany(type, id);\n\t\t\t\treturn this._findOne(type, id);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._findAll(type);\n\t\t\t}\n\t\t},\n\n\t\tfindLink: function(type, id, link){\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(type, link).type;\n\t\t\treturn this._firebaseClient.valueAt([type, id, link]).then(function(linkValue){\n\t\t\t\tif(linkType === 'hasMany') {\n\t\t\t\t\treturn linkValue ? Object.keys(linkValue) : [];\n\t\t\t\t}\n\t\t\t\telse if(linkType === 'hasOne') {\n\t\t\t\t\treturn linkValue;\n\t\t\t\t}\n\t\t\t\tthrow new Error(\"Links of type \" + linkType + \" not handled\");\n\t\t\t});\n\t\t},\n\n\t\tfindLinked: function(type, id, link){\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(type, link).type;\n\t\t\tif(linkType === 'hasMany') {\n\t\t\t\treturn this._findLinkedHasMany(type, id, link);\n\t\t\t}\n\t\t\telse if(linkType === 'hasOne') {\n\t\t\t\treturn this._findLinkedHasOne(type, id, link);\n\t\t\t}\n\t\t\tthrow new Error(\"Links of type \" + linkType + \" not handled\");\n\t\t},\n\n\t\t_findOne: function(type, id){\n\t\t\tvar _this = this;\n\n\t\t\treturn _this._firebaseClient.valueAt([type, id]).then(function(record){\n\t\t\t\t// todo - is this the correct behaviour for not found?\n\t\t\t\tif(!record) throw new exceptions.RecordNotFoundException(type + \":\" + id);\n\t\t\t\treturn _this._serializer.deserialize(type, id, record);\n\t\t\t});\n\t\t},\n\n\t\t_findMany: function(type, ids){\n\t\t\tvar _this = this;\n\t\t\tvar promises = object_utils.reduce(ids, function(id){\n\t\t\t\treturn _this._findOne(type, id);\n\t\t\t});\n\n\t\t\treturn Orbit['default'].all(promises);\n\t\t},\n\n\t\t_findAll: function(type){\n\t\t\tvar _this = this;\n\t\t\treturn _this._firebaseClient.valueAt(type).then(function(recordsHash){\n\t\t\t\tvar records = object_utils.objectValues(recordsHash);\n\t\t\t\tconsole.log(\"findAll results for: \" + type, records);\n\t\t\t\treturn _this._serializer.deserializeRecords(type, records);\n\t\t\t});\n\t\t},\n\n\t\t_findLinkedHasMany: function(type, id, link){\n\t\t\tvar _this = this;\n\t\t\tvar linkDef = this._schemaUtils.lookupLinkDef(type, link);\n\t\t\tvar model = linkDef.model;\n\n\t\t\treturn this.findLink(type, id, link).then(function(ids){\n\t\t\t\tvar promised = [];\n\t\t\t\tfor(var i = 0; i < ids.length; i++){\n\t\t\t\t\tpromised[i] = _this._firebaseClient.valueAt([model, ids[i]]);\n\t\t\t\t}\n\n\t\t\t\treturn Orbit['default'].map(promised, function(record){\n\t\t\t\t\treturn _this._serializer.deserialize(model, record.id, record);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t_findLinkedHasOne: function(type, id, link){\n\t\t\tvar _this = this;\n\t\t\tvar linkDef = this._schemaUtils.lookupLinkDef(type, link);\n\t\t\tvar model = linkDef.model;\n\n\t\t\treturn this.findLink(type, id, link).then(function(id){\n\t\t\t\treturn _this._firebaseClient.valueAt([model, id]).then(function(serializedRecord){\n\t\t\t\t\treturn _this._serializer.deserialize(model, id, serializedRecord);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-serializer', ['exports', 'orbit-common/serializer', 'orbit/lib/objects', 'orbit/lib/assert'], function (exports, Serializer, objects, assert) {\n\n\t'use strict';\n\n\texports['default'] = Serializer['default'].extend({\n\t\tserialize: function(type, records){\n\t\t\treturn this.serializeRecord(type, records);\n\t\t},\n\n\t\tserializeRecord: function(type, record) {\n\t\t\tassert.assert(record, \"Must provide a record\");\n\n\t\t\tvar json = {};\n\n\t\t\tthis.serializeKeys(type, record, json);\n\t\t\tthis.serializeAttributes(type, record, json);\n\t\t\tthis.serializeLinks(type, record, json);\n\n\t\t\treturn json;\n\t\t},\n\n\t\tserializeKeys: function(type, record, json) {\n\t\t\tvar modelSchema = this.schema.models[type];\n\t\t\tvar resourceKey = this.resourceKey(type);\n\t\t\tvar value = record[resourceKey];\n\n\t\t\tif (value) {\n\t\t\t\tjson[resourceKey] = value;\n\t\t\t}\n\t\t},\n\n\t\tserializeAttributes: function(type, record, json) {\n\t\t\tvar modelSchema = this.schema.models[type];\n\n\t\t\tObject.keys(modelSchema.attributes).forEach(function(attr) {\n\t\t\t\tthis.serializeAttribute(type, record, attr, json);\n\t\t\t}, this);\n\t\t},\n\n\t\tserializeAttribute: function(type, record, attr, json) {\n\t\t\tjson[this.resourceAttr(type, attr)] = record[attr];\n\t\t},\n\n\t\tserializeLinks: function(type, record, json) {\n\t\t\tvar modelSchema = this.schema.models[type];\n\t\t\tvar linkNames = Object.keys(modelSchema.links);\n\n\t\t\tlinkNames.forEach(function(link){\n\t\t\t\tvar value = record.__rel[link];\n\t\t\t\tjson[link] = value;\n\t\t\t});\n\t\t},\n\n\t\tdeserializeRecords: function(type, records){\n\t\t\tvar _this = this;\n\t\t\treturn records.map(function(record){\n\t\t\t\treturn _this.deserialize(type, record.id, record);\n\t\t\t});\n\t\t},\n\n\t\tdeserialize: function(type, id, record){\n\t\t\trecord = record || {};\n\t\t\tvar data = {};\n\n\t\t\tthis.deserializeKeys(type, id, record, data);\n\t\t\tthis.deserializeAttributes(type, record, data);\n\t\t\tthis.deserializeLinks(type, record, data);\n\n\t\t\treturn this.schema.normalize(type, data);\n\t\t},\n\n\t\tdeserializeKeys: function(type, id, record, data){\n\t\t\tdata[this.schema.models[type].primaryKey.name] = id;\n\t\t},\n\n\t\tdeserializeAttributes: function(type, record, data){\n\t\t\tvar modelSchema = this.schema.models[type];\n\n\t\t\tObject.keys(modelSchema.attributes).forEach(function(attr) {\n\t\t\t\tthis.deserializeAttribute(type, record, attr, data);\n\t\t\t}, this);\n\t\t},\n\n\t\tdeserializeAttribute: function(type, record, attr, data){\n\t\t\tdata[attr] = record[attr] || null; // firebase doesn't like 'undefined' so replace with null\n\t\t},\n\n\t\tdeserializeLinks: function(type, record, data){\n\t\t\tvar _this = this;\n\t\t\tvar modelSchema = this.schema.models[type];\n\t\t\tdata.__rel = {};\n\n\t\t\tObject.keys(modelSchema.links).forEach(function(link) {\n\t\t\t\tvar value;\n\t\t\t\tvar linkDef = modelSchema.links[link];\n\n\t\t\t\tif(linkDef.type === \"hasOne\"){\n\t\t\t\t\tvalue = record[link];\n\t\t\t\t}\n\t\t\t\telse if(linkDef.type === \"hasMany\"){\n\t\t\t\t\tvalue = record[link] || {};\n\t\t\t\t}\n\n\t\t\t\tdata.__rel[link] = value;\n\t\t\t});\n\t\t},\n\n\t\tbuildHash: function(keys, value){\n\t\t\tvar hash = {};\n\n\t\t\tkeys.forEach(function(key){\n\t\t\t\thash[key] = value;\n\t\t\t});\n\n\t\t\treturn hash;\n\t\t},\n\n\t\tresourceKey: function(type) {\n\t\t\treturn 'id';\n\t\t},\n\n\t\tresourceType: function(type) {\n\t\t\treturn this.schema.pluralize(type);\n\t\t},\n\n\t\tresourceLink: function(type, link) {\n\t\t\treturn link;\n\t\t},\n\n\t\tresourceAttr: function(type, attr) {\n\t\t\treturn attr;\n\t\t}\n\t});\n\n});","define('orbit-firebase/firebase-source', ['exports', 'orbit/lib/objects', 'orbit/main', 'orbit/lib/assert', 'orbit-common/source', 'orbit-firebase/lib/object-utils', 'orbit/transform-connector', 'orbit/operation', 'orbit-firebase/firebase-client', 'orbit-firebase/firebase-requester', 'orbit-firebase/firebase-transformer', 'orbit-firebase/firebase-serializer', 'orbit-firebase/firebase-listener', 'orbit-firebase/firebase-connector', 'orbit-firebase/cache-source', 'orbit-firebase/eager-relationship-loader', 'orbit-firebase/operation-matcher', 'orbit-firebase/operation-decomposer', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/operation-utils'], function (exports, objects, Orbit, assert, Source, object_utils, TransformConnector, Operation, FirebaseClient, FirebaseRequester, FirebaseTransformer, FirebaseSerializer, FirebaseListener, FirebaseConnector, CacheSource, EagerRelationshipLoader, OperationMatcher, OperationDecomposer, SchemaUtils, operation_utils) {\n\n\t'use strict';\n\n\texports['default'] = Source['default'].extend({\n\t\tnotifierName: \"firebase-source\",\n\n\t\tinit: function(schema, options){\n\t\t\tvar _this = this;\n\t\t\toptions = options || {};\n\n\t\t\tthis._super.apply(this, arguments);\n\n\t\t\tassert.assert('FirebaseSource requires Orbit.Promise be defined', Orbit['default'].Promise);\n\t\t\tassert.assert('FirebaseSource requires Orbit.all be defined', Orbit['default'].all);\n\t\t\tassert.assert('FirebaseSource requires Orbit.map be defined', Orbit['default'].map);\n\t\t\tassert.assert('FirebaseSource requires Orbit.resolve be defined', Orbit['default'].resolve);\n\t\t\tassert.assert('FirebaseSource requires firebaseRef be defined', options.firebaseRef);\n\n\t\t\tvar firebaseRef = options.firebaseRef;\n\t\t\tvar serializer = new FirebaseSerializer['default'](schema);\n\t\t\tvar firebaseClient = new FirebaseClient['default'](firebaseRef);\n\n\t\t\tthis._firebaseTransformer = new FirebaseTransformer['default'](firebaseClient, schema, serializer);\n\t\t\tthis._firebaseRequester = new FirebaseRequester['default'](firebaseClient, schema, serializer);\n\t\t\tthis._firebaseListener = new FirebaseListener['default'](firebaseRef, schema, serializer);\n\n\t\t\tvar cacheSource = new CacheSource['default'](this._cache);\n\t\t\tthis._firebaseConnector = new FirebaseConnector['default'](this._firebaseListener, cacheSource);\n\t\t\tthis.on(\"didTransform\", function(operation){\n\t\t\t\tconsole.log(\"fb.transmitting\", operation.serialize());\n\t\t\t})\n\t\t},\n\n\t\tdisconnect: function(){\n\t\t\tthis._firebaseListener.unsubscribeAll();\n\t\t},\n\n\t\t_transform: function(operation){\n\t\t\tconsole.log(\"fb.transform\", operation.serialize());\n\t\t\tvar _this = this;\n\n\t\t\treturn this._firebaseTransformer.transform(operation).then(function(result){\n\n\t\t\t\tif(operation.op === \"add\" && operation.path.length === 2){\n\t\t\t\t\tvar type = operation.path[0];\n\t\t\t\t\t_this._subscribeToRecords(type, result);\n\t\t\t\t}\n\n\t\t\t\tif(operation.op !== \"remove\" && operation.path.length === 2){\n\t\t\t\t\toperation.value = _this.schema.normalize(operation.path[0], operation.value);\n\t\t\t\t}\n\n\t\t\t\t_this._cache.transform(operation);\n\t\t\t});\n\t\t},\n\n\t\t_find: function(type, id){\n\t\t\tvar _this = this;\n\t\t\treturn this._firebaseRequester.find(type, id).then(function(records){\n\t\t\t\tif(!id) _this._firebaseListener.subscribeToType(type);\n\t\t\t\t_this._subscribeToRecords(type, records);\n\t\t\t\treturn _this._addRecordsToCache(type, records);\n\t\t\t});\n\t\t},\n\n\t\t_findLink: function(type, id, link){\n\t\t\treturn this._firebaseRequester.findLink(type, id, link);\n\t\t},\n\n\t\t_findLinked: function(type, id, link){\n\t\t\tvar _this = this,\n\t\t\t\tlinkedType = this.schema.models[type].links[link].model;\n\n\t\t\treturn this._firebaseRequester.findLinked(type, id, link).then(function(records){\n\t\t\t\t_this._subscribeToRecords(linkedType, records);\n\t\t\t\treturn _this._addRecordsToCache(linkedType, records);\n\t\t\t});\n\t\t},\n\n\t\t_subscribeToRecords: function(type, records){\n\t\t\trecords = objects.isArray(records) ? records : [records];\n\t\t\tthis._firebaseListener.subscribeToRecords(type, object_utils.pluck(records, 'id'));\n\t\t},\n\n\t\t_addRecordsToCache: function(type, recordOrRecords) {\n\t\t\tvar _this = this;\n\t\t\tvar records = objects.isArray(recordOrRecords) ? recordOrRecords : [recordOrRecords];\n\n\t\t\trecords.forEach(function(record){\n\t\t\t\t_this._addRecordToCache(type, record);\n\t\t\t});\n\n\t\t\treturn this.settleTransforms().then(function(){\n\t\t\t\treturn recordOrRecords;\n\t\t\t});\n\t\t},\n\n\t\t_addRecordToCache: function(type, record) {\n\t\t\tvar operation = new Operation['default']({\n\t\t\t\top: 'add',\n\t\t\t\tpath: [type, record.id],\n\t\t\t\tvalue: record\n\t\t\t});\n\n\t\t\tthis._firebaseConnector.transform(operation);\n\t\t},\n\t});\n\n});","define('orbit-firebase/firebase-transformer', ['exports', 'orbit/lib/objects', 'orbit-firebase/transformers/add-record', 'orbit-firebase/transformers/remove-record', 'orbit-firebase/transformers/replace-attribute', 'orbit-firebase/transformers/add-to-has-many', 'orbit-firebase/transformers/add-to-has-one', 'orbit-firebase/transformers/remove-has-one', 'orbit-firebase/transformers/replace-has-many', 'orbit-firebase/transformers/remove-from-has-many', 'orbit-firebase/transformers/update-meta'], function (exports, objects, AddRecord, RemoveRecord, ReplaceAttribute, AddToHasMany, AddToHasOne, RemoveHasOne, ReplaceHasMany, RemoveFromHasMany, UpdateMeta) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema, serializer, cache){\n\t\t\tthis._schema = schema;\n\n\t\t\tthis._transformers = [\n\t\t\t\tnew AddRecord['default'](firebaseClient, schema, serializer),\n\t\t\t\tnew RemoveRecord['default'](firebaseClient),\n\t\t\t\tnew ReplaceAttribute['default'](firebaseClient),\n\t\t\t\tnew AddToHasMany['default'](firebaseClient, schema),\n\t\t\t\tnew AddToHasOne['default'](firebaseClient, schema),\n\t\t\t\tnew RemoveHasOne['default'](firebaseClient, schema),\n\t\t\t\tnew ReplaceHasMany['default'](firebaseClient, schema),\n\t\t\t\tnew RemoveFromHasMany['default'](firebaseClient, schema),\n\t\t\t\tnew UpdateMeta['default'](cache)\n\t\t\t];\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tthis._normalizeOperation(operation);\n\t\t\tvar transformer = this._findTransformer(operation);\n\t\t\treturn transformer.transform(operation);\n\t\t},\n\n\t    _normalizeOperation: function(op) {\n\t      if (typeof op.path === 'string') {\n\t      \top.path = op.path.split('/');\n\t      }\n\t    },\n\n\t\t_findTransformer: function(operation){\n\t\t\tfor(var i = 0; i < this._transformers.length; i++){\n\t\t\t\tvar transformer = this._transformers[i];\n\n\t\t\t\tif(transformer.handles(operation)) {\n\t\t\t\t\tconsole.log(\"using transformer\", transformer);\n\t\t\t\t\treturn transformer;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(\"Couldn't find a transformer for: \" + JSON.stringify(operation));\n\t\t}\n\t});\n\n});","define('orbit-firebase/lib/array-utils', ['exports'], function (exports) {\n\n\t'use strict';\n\n\texports.removeItem = removeItem;\n\texports.removeAt = removeAt;\n\texports.reduce = reduce;\n\texports.pluck = pluck;\n\n\tfunction removeItem(array, condemned){\n\t\treturn array.filter(function(item){\n\t\t\treturn item !== condemned;\n\t\t});\n\t}\n\n\tfunction removeAt(array, index){\n\t\tvar working = array.splice(0);\n\t\tworking.splice(index, 1);\n\t\treturn working;\n\t}\n\n\tfunction reduce(array, callback){\n\t\tvar reduced = [];\n\n\t\tfor(var i = 0; i < array.length; i++){\n\t\t\treduced[i] = callback(array[i]);\n\t\t}\n\n\t\treturn reduced;\n\t}\n\n\tfunction pluck(array, property){\n\t\treturn reduce(array, function(item){\n\t\t\treturn item[property];\n\t\t});\n\t}\n\n});","define('orbit-firebase/lib/cache-utils', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(cache){\n\t\t\tthis.cache = cache;\n\t\t},\n\n\t\tretrieveLink: function(type, id, link) {\n\t\t\tvar val = this.cache.retrieve([type, id, '__rel', link]);\n\t\t\tif (val !== null && typeof val === 'object') {\n\t\t\t\tval = Object.keys(val);\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\t});\n\n});","define('orbit-firebase/lib/object-utils', ['exports'], function (exports) {\n\n\t'use strict';\n\n\texports.objectValues = objectValues;\n\texports.pluck = pluck;\n\texports.reduce = reduce;\n\n\tfunction objectValues(object){\n\t\tif(!object) return [];\n\t\treturn Object.keys(object).map(function(key){\n\t\t\treturn object[key];\n\t\t});\n\t}\n\n\tfunction reduce(array, callback){\n\t\tvar reduced = [];\n\n\t\tfor(var i = 0; i < array.length; i++){\n\t\t\treduced[i] = callback(array[i]);\n\t\t}\n\n\t\treturn reduced;\n\t}\n\n\tfunction pluck(array, property){\n\t\treturn reduce(array, function(item){\n\t\t\treturn item[property];\n\t\t});\n\t}\n\n});","define('orbit-firebase/lib/operation-utils', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/array-utils'], function (exports, objects, array_utils) {\n\n\t'use strict';\n\n\texports.fop = fop;\n\n\tfunction formatOperation(operation){\n\t\tvar formatted = {\n\t\t\tid: operation.id,\n\t\t\top: operation.op,\n\t\t\tpath: (typeof operation.path === 'string') ? operation.path : operation.path.join(\"/\")\n\t\t};\t\n\n\t\tif(operation.value) formatted.value = operation.value;\n\n\t\treturn formatted;\n\t}\n\n\tfunction fop(operationOrOperations){\n\t\tif(objects.isArray(operationOrOperations)){\n\t\t\treturn array_utils.reduce(operationOrOperations, function(operation){\n\t\t\t\treturn formatOperation(operation);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn formatOperation(operationOrOperations);\n\t\t}\n\t}\n\n});","define('orbit-firebase/lib/schema-utils', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(schema){\n\t\t\tthis.schema = schema;\n\t\t},\n\n\t\tlookupLinkDef: function(model, link){\n\t\t\tvar modelSchema = this.schema.models[model];\n\t\t\tvar linkDef = modelSchema.links[link];\n\t\t\treturn linkDef;\n\t\t},\n\n\t\tlookupRelatedLinkDef: function(model, link){\n\t\t\tvar linkDef = this.lookupLinkDef(model, link);\n\t\t\treturn this.schema.models[linkDef.model].links[linkDef.inverse];\n\t\t},\n\n\t\tlinkTypeFor: function(model, link){\n\t\t\tvar linkDef = this.lookupLinkDef(model, link);\n\t\t\tif(!linkDef) throw new Error(\"Could not find type for \" + model + \"/\" + link);\n\t\t\treturn linkDef.type;\n\t\t}\n\t});\n\n});","define('orbit-firebase/operation-decomposer', ['exports', 'orbit/lib/objects', 'orbit-firebase/operation-matcher', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/cache-utils', 'orbit/operation'], function (exports, objects, OperationMatcher, SchemaUtils, CacheUtils, Operation) {\n\n\t'use strict';\n\n\tfunction asHash(k,v){\n\t  var hash = {};\n\t  hash[k] = v;\n\t  return hash;\n\t}\n\n\tfunction buildObject(keys, value){\n\t\tvar hash = {};\n\t\tkeys.forEach(function(key){\n\t\t\thash[key] = value;\n\t\t});\n\t\treturn hash;\n\t}\n\n\tvar ChangeDetails = objects.Class.extend({\n\t\tinit: function(path, value, schema, cache){\n\t\t\tthis.path = path;\n\t\t\tthis.value = value;\n\t\t\tthis.schema = schema;\n\t\t\tthis.schemaUtils = new SchemaUtils['default'](schema);\t\t\n\t\t\tthis.cache = cache;\n\t\t},\n\n\t\tmodel: function(){\n\t\t\treturn this.path[0];\n\t\t},\n\n\t\tmodelId: function(){\n\t\t\treturn this.path[1];\n\t\t},\n\n\t\tlink: function(){\n\t\t\treturn this.path[3];\n\t\t},\n\n\t\tcurrentValue: function(){\n\t\t\treturn this.cache.retrieve(this.path);\n\t\t},\n\n\t\tlinkDef: function(){\n\t\t\treturn this.schemaUtils.lookupLinkDef(this.model(), this.link());\n\t\t},\n\n\t\toriginalInversePath: function(){\n\t\t\treturn [this.linkDef().model, this.currentValue(), \"__rel\", this.linkDef().inverse];\n\t\t},\n\n\t\tinverseLinkDef: function(){\n\t\t\treturn this.schemaUtils.lookupRelatedLinkDef(this.model(), this.link());\n\t\t},\n\n\t\tnewInversePath: function(){\n\t\t\treturn [this.linkDef().model, this.value, \"__rel\", this.linkDef().inverse];\n\t\t}\n\t});\n\n\tvar RelationshipResolver = objects.Class.extend({\n\t\tinit: function(schema, cache){\n\t\t\tthis.visited = [];\n\t\t\tthis.schema = schema;\n\t\t\tthis.schemaUtils = new SchemaUtils['default'](schema);\n\t\t\tthis.cache = cache;\n\t\t\tthis.cacheUtils = new CacheUtils['default'](cache);\t\t\n\t\t\tthis.operations = [];\n\t\t},\n\n\t\tvisit: function(op, path, value){\n\t\t\tif(this.hasVisited(path)) return;\n\t\t\tthis.markVisited(path);\n\n\t\t\tvar linkType = this.schemaUtils.linkTypeFor(path[0], path[3]);\n\n\t\t\tif(!path[1]) throw new Error(\"invalid modelId: \" + op + \"|\" + path + \"|\" + value);\n\n\t\t\tthis[linkType][op].call(this, path, value);\n\t\t},\n\n\t\thasVisited: function(path){\n\t\t\treturn this.visited.indexOf(path.join(\"/\")) !== -1;\n\t\t},\n\n\t\tmarkVisited: function(path){\n\t\t\tthis.visited.push(path.join(\"/\"));\n\t\t},\n\n\t\thasOne: {\n\t\t\tadd: function(path, value){\n\t\t\t\tvar changeDetails = new ChangeDetails(path, value, this.schema, this.cache);\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'add', path: changeDetails.path, value: changeDetails.value }));\n\t\t\t\tif(changeDetails.currentValue()){\n\t\t\t\t\tthis.visit(\"remove\", changeDetails.originalInversePath(), changeDetails.modelId());\n\t\t\t\t}\n\t\t\t\tthis.visit(\"add\", changeDetails.newInversePath(), changeDetails.modelId());\n\t\t\t},\n\n\t\t\tremove: function(path, value){\n\t\t\t\tvar changeDetails = new ChangeDetails(path, value, this.schema, this.cache);\n\t\t\t\tif(!value) return;\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'remove', path: changeDetails.path}));\n\t\t\t\tthis.visit(\"remove\", changeDetails.originalInversePath(), changeDetails.modelId());\n\t\t\t},\n\n\t\t\treplace: function(path, value){\n\t\t\t\tvar changeDetails = new ChangeDetails(path, value, this.schema, this.cache);\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'replace', path: changeDetails.path, value: changeDetails.value }));\n\t\t\t\tif(changeDetails.currentValue()){\n\t\t\t\t\tthis.visit(\"remove\", changeDetails.originalInversePath(), changeDetails.modelId());\n\t\t\t\t}\n\t\t\t\tthis.visit(\"add\", changeDetails.newInversePath(), changeDetails.modelId());\n\t\t\t}\n\t\t},\n\n\t\thasMany: {\n\t\t\tadd: function(path, value){\n\n\t\t\t\tvar linkDef = this.schemaUtils.lookupLinkDef(path[0], path[3]);\n\t\t\t\tvar inversePath = [linkDef.model, value, \"__rel\", linkDef.inverse];\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'add', path: path.concat(value), value: true }));\n\t\t\t\tthis.visit(\"add\", inversePath, path[1]);\n\t\t\t},\n\n\t\t\tremove: function(path, value){\n\t\t\t\tvar linkDef = this.schemaUtils.lookupLinkDef(path[0], path[3]);\n\t\t\t\tvar inversePath = [linkDef.model, value, \"__rel\", linkDef.inverse];\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'remove', path: path.concat(value) }));\n\t\t\t\tthis.visit(\"remove\", inversePath, path[1]);\n\t\t\t},\n\n\t\t\treplace: function(path, value){\n\t\t\t\tvar _this = this,\n\t\t\t\t\trelatedLinkDef = this.schemaUtils.lookupRelatedLinkDef(path[0], path[3]);\n\n\t\t\t\tthis.operations.push(new Operation['default']({ op: 'replace', path: path, value: buildObject(value, true) }));\n\t\t\t\t\n\t\t\t\tif(relatedLinkDef.type === 'hasMany') return;\n\n\t\t\t\tvar linkValue = this.cache.retrieve(path),\n\t\t\t\t\tcurrentValue = linkValue ? Object.keys(linkValue) : [],\n\t\t\t\t\tmodelId = path[1],\n\t\t\t\t\tlinkDef = this.schemaUtils.lookupLinkDef(path[0], path[3]);\n\t\t\t\t\n\t\t\t\tvar added = value.filter(function(id){\n\t\t\t\t\treturn currentValue.indexOf(id) === -1;\n\t\t\t\t});\n\t\t\t\tvar removed = currentValue.filter(function(id){\n\t\t\t\t\treturn value.indexOf(id) === -1;\n\t\t\t\t});\n\n\t\t\t\tadded.forEach(function(id){\n\t\t\t\t\tvar inversePath = [linkDef.model, id, \"__rel\", linkDef.inverse];\n\t\t\t\t\t_this.visit(\"add\", inversePath, modelId);\n\t\t\t\t});\n\n\t\t\t\tremoved.forEach(function(id){\n\t\t\t\t\tvar inversePath = [linkDef.model, id, \"__rel\", linkDef.inverse];\n\t\t\t\t\t_this.visit(\"remove\", inversePath, modelId);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(schema, cache){\n\t\t\tthis.schema = schema;\n\t\t\tthis.schemaUtils = new SchemaUtils['default'](schema);\n\t\t\tthis.cache = cache;\n\t\t\tthis.cacheUtils = new CacheUtils['default'](cache);\n\t\t},\n\n\t\tdecompose: function(operation){\n\t\t\tif(operation.path[2] !== \"__rel\") return [operation];\n\t\t\tvar relationshipResolver = new RelationshipResolver(this.schema, this.cache);\n\t\t\tvar normalized = this.normalize(operation);\n\t\t\trelationshipResolver.visit(normalized.op, normalized.path, normalized.value);\n\t\t\treturn relationshipResolver.operations;\n\t\t},\n\n\t\tnormalize: function(operation){\n\t\t\tvar linkDef = this.schemaUtils.lookupLinkDef(operation.path[0], operation.path[3]);\n\t\t\tvar path = operation.path;\n\n\t\t\tif([\"hasMany\", \"hasOne\"].indexOf(linkDef.type) === -1) throw new Error(\"unsupported link type: \" + linkDef.type);\n\n\t\t\tif(linkDef.type === \"hasOne\" && operation.op === \"add\") return operation;\n\t\t\tif(linkDef.type === \"hasOne\" && operation.op === \"remove\"){\n\t\t\t\treturn {\n\t\t\t\t\top: operation.op, \n\t\t\t\t\tpath: path, \n\t\t\t\t\tvalue: this.cache.retrieve(path)\n\t\t\t\t};\n\t\t\t}\n\t\t\tif(linkDef.type === \"hasMany\" && (['add', 'remove'].indexOf(operation.op) !== -1)) {\n\t\t\t\treturn { \n\t\t\t\t\top: operation.op, \n\t\t\t\t\tpath: path.slice(0,-1), \n\t\t\t\t\tvalue: path[path.length-1] \n\t\t\t\t};\n\t\t\t}\n\t\t\tif(linkDef.type === \"hasMany\" && operation.op === \"replace\"){\n\t\t\t\treturn {\n\t\t\t\t\top: operation.op,\n\t\t\t\t\tpath: operation.path,\n\t\t\t\t\tvalue: Object.keys(operation.value)\t\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn operation;\n\t\t}\n\t});\n\n});","define('orbit-firebase/operation-matcher', ['exports', 'orbit/lib/objects', 'orbit/lib/assert'], function (exports, objects, assert) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(operation, schema){\n\t\t\tassert.assert('OperationMatcher requires the operation', operation);\n\t\t\tassert.assert('OperationMatcher requires the schema', schema && schema.models);\n\n\t\t\tthis.valueType = this._determineValueType(operation.path, schema);\n\t\t\tthis.op = operation.op;\n\t\t\tthis.schema = schema;\n\t\t},\n\n\t\tmatches: function(op, valueType){\n\t\t\treturn this.op === op && this.valueType === valueType;\n\t\t},\n\n\t\t_determineValueType: function(path, schema){\n\t\t\tif(path.length === 1) return 'type';\n\t\t\tif(path.length === 2) return 'record';\n\t\t\tif(path.length === 5) return 'link';\n\t\t\tif(path.length === 4 && path[2] === \"__rel\") return 'link';\n\t\t\tif(path[2].match(/^__/)) return \"meta\";\n\n\t\t\tvar model = schema.models[path[0]];\n\t\t\tvar key = path[2];\n\t\t\tif(model.attributes[key]) return 'attribute';\n\t\t\tif(model.keys[key]) return 'key';\n\t\t\tthrow \"Unable to determine value type at: \" + path.join(\"/\");\n\t\t},\t\n\t});\n\n});","define('orbit-firebase/transformers/add-record', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema, serializer){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schema = schema;\n\t\t\tthis._serializer = serializer;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn operation.op === \"add\" && operation.path.length === 2;\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar model = operation.path[0];\n\t\t\tvar record = this._schema.normalize(model, operation.value);\n\t\t\tvar serializedRecord = this._serializer.serializeRecord(model, record);\n\n\t\t\treturn this._firebaseClient.set(operation.path, serializedRecord);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/add-to-has-many', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return; \n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"add\" && linkType === 'hasMany';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.set(path, operation.value);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/add-to-has-one', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn [\"add\", \"replace\"].indexOf(operation.op) !== -1 && path[2] === '__rel' && linkType === 'hasOne';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.set(path, operation.value);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/remove-from-has-many', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"remove\" && path[2] === '__rel' && linkType === 'hasMany';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.remove(path);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/remove-has-one', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"remove\" && path[2] === '__rel' && linkType === 'hasOne';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.remove(path);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/remove-record', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn operation.op === \"remove\" && operation.path.length === 2;\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\treturn this._firebaseClient.set(operation.path, null);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/replace-attribute', ['exports', 'orbit/lib/objects'], function (exports, objects) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn [\"replace\", \"add\"].indexOf(operation.op) !== -1 && operation.path.length === 3 && !operation.path[2].match(/^__/);\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\treturn this._firebaseClient.set(operation.path, operation.value);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/replace-has-many', ['exports', 'orbit/lib/objects', 'orbit-firebase/lib/schema-utils', 'orbit-firebase/lib/array-utils'], function (exports, objects, SchemaUtils, array_utils) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(firebaseClient, schema){\n\t\t\tthis._firebaseClient = firebaseClient;\n\t\t\tthis._schemaUtils = new SchemaUtils['default'](schema);\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\tvar path = operation.path;\n\t\t\tif(path[2] !== '__rel') return;\n\t\t\tvar linkType = this._schemaUtils.lookupLinkDef(path[0], path[3]).type;\n\t\t\treturn operation.op === \"replace\" && path[2] === '__rel' && linkType === 'hasMany';\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tvar path = array_utils.removeItem(operation.path, '__rel');\n\t\t\treturn this._firebaseClient.set(path, operation.value);\n\t\t}\n\t});\n\n});","define('orbit-firebase/transformers/update-meta', ['exports', 'orbit/lib/objects', 'orbit/main'], function (exports, objects, Orbit) {\n\n\t'use strict';\n\n\texports['default'] = objects.Class.extend({\n\t\tinit: function(cache){\n\t\t\tthis._cache = cache;\n\t\t},\n\n\t\thandles: function(operation){\n\t\t\treturn operation.path[2].match(/^__/);\n\t\t},\n\n\t\ttransform: function(operation){\n\t\t\tconsole.log(\"applying to cache\", operation);\n\t\t\tthis._cache.transform(operation);\t\t\t\t\n\t\t\tconsole.log(\"applied to cache\", operation);\n\t\t\treturn Orbit['default'].resolve();\n\t\t}\n\t});\n\n});","})();\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjrzrpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpBA;","file":"orbit-firebase.js"}